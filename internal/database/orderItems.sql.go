// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orderItems.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const addItem = `-- name: AddItem :exec
INSERT INTO orderitem(order_id, menu_item_id, quanity)
VALUES (
        $1,
        $2,
        $3
       )
`

type AddItemParams struct {
	OrderID    int32
	MenuItemID int32
	Quanity    int32
}

func (q *Queries) AddItem(ctx context.Context, arg AddItemParams) error {
	_, err := q.db.ExecContext(ctx, addItem, arg.OrderID, arg.MenuItemID, arg.Quanity)
	return err
}

const addItems = `-- name: AddItems :many
INSERT INTO orderitem(order_id, menu_item_id, quanity)
SELECT unnest($1::int[]), unnest($2::int[]), unnest($3::int[])
RETURNING order_id, menu_item_id, quanity
`

type AddItemsParams struct {
	Column1 []int32
	Column2 []int32
	Column3 []int32
}

func (q *Queries) AddItems(ctx context.Context, arg AddItemsParams) ([]Orderitem, error) {
	rows, err := q.db.QueryContext(ctx, addItems, pq.Array(arg.Column1), pq.Array(arg.Column2), pq.Array(arg.Column3))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Orderitem
	for rows.Next() {
		var i Orderitem
		if err := rows.Scan(&i.OrderID, &i.MenuItemID, &i.Quanity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
