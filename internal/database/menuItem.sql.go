// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: menuItem.sql

package database

import (
	"context"
	"database/sql"
)

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO menuitem (restaurant_id, name, price, description, available)
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
)
RETURNING id, restaurant_id, name, price, description, available
`

type CreateMenuItemParams struct {
	RestaurantID int32
	Name         string
	Price        float64
	Description  sql.NullString
	Available    sql.NullBool
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (Menuitem, error) {
	row := q.db.QueryRowContext(ctx, createMenuItem,
		arg.RestaurantID,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.Available,
	)
	var i Menuitem
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.Available,
	)
	return i, err
}

const getMenu = `-- name: GetMenu :many
SELECT id, restaurant_id, name, price, description, available FROM menuitem
WHERE restaurant_id=$1
`

func (q *Queries) GetMenu(ctx context.Context, restaurantID int32) ([]Menuitem, error) {
	rows, err := q.db.QueryContext(ctx, getMenu, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Menuitem
	for rows.Next() {
		var i Menuitem
		if err := rows.Scan(
			&i.ID,
			&i.RestaurantID,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.Available,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
