// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refreshTokens.sql

package database

import (
	"context"
	"database/sql"
)

const createToken = `-- name: CreateToken :one
INSERT INTO refreshTokens (token, created_at, updated_at, user_id, expires_at)
VALUES (
    $1,
        NOW(),
        NOW(),
        $2,
        NOW() + INTERVAL '10 days'
)
RETURNING token, expires_at
`

type CreateTokenParams struct {
	Token  string
	UserID int32
}

type CreateTokenRow struct {
	Token     string
	ExpiresAt sql.NullTime
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (CreateTokenRow, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.Token, arg.UserID)
	var i CreateTokenRow
	err := row.Scan(&i.Token, &i.ExpiresAt)
	return i, err
}

const getTokensByUser = `-- name: GetTokensByUser :many
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refreshtokens
WHERE user_id = $1
`

func (q *Queries) GetTokensByUser(ctx context.Context, userID int32) ([]Refreshtoken, error) {
	rows, err := q.db.QueryContext(ctx, getTokensByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Refreshtoken
	for rows.Next() {
		var i Refreshtoken
		if err := rows.Scan(
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ExpiresAt,
			&i.RevokedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT user_id FROM refreshtokens
WHERE token = $1
`

func (q *Queries) GetUserByToken(ctx context.Context, token string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, token)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}
