// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders(customerid, restaurantid, address, status, created_at)
VALUES (
        $1,
        $2,
        $3,
        'pending',
        NOW()
)
RETURNING id, customerid, restaurantid, courierid, status, created_at, address
`

type CreateOrderParams struct {
	Customerid   int32
	Restaurantid int32
	Address      string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.Customerid, arg.Restaurantid, arg.Address)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Customerid,
		&i.Restaurantid,
		&i.Courierid,
		&i.Status,
		&i.CreatedAt,
		&i.Address,
	)
	return i, err
}

const getCurrentOrderForCourier = `-- name: GetCurrentOrderForCourier :one
SELECT id FROM orders
WHERE status = 'delivering' AND courierid=$1
`

func (q *Queries) GetCurrentOrderForCourier(ctx context.Context, courierid sql.NullInt32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getCurrentOrderForCourier, courierid)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getFullOrderByID = `-- name: GetFullOrderByID :many
SELECT
    orders.id AS order_id,
    orders.status,
    orders.created_at,
    orders.address AS delivery_address,

    orderitem.menu_item_id,
    orderitem.quanity,

    menuitem.name AS menu_item_name,
    menuitem.price,

    restaurants.address AS restaurant_address,
    restaurants.user_name AS restaurant_name,
    restaurants.phone AS restaurant_phone,

    customer.user_name AS costomer_name,
    customer.phone AS customer_phone,
    customer.id AS customer_id,

    courier.user_name AS courier_name

FROM orders
         JOIN orderitem ON orders.id = orderitem.order_id
         JOIN menuitem ON orderitem.menu_item_id = menuitem.id
         JOIN users AS restaurants ON orders.restaurantid = restaurants.id
         JOIN users AS customer ON orders.customerid = customer.id
        LEFT JOIN users AS courier ON orders.courierid = courier.id
WHERE orders.id = $1
`

type GetFullOrderByIDRow struct {
	OrderID           int32
	Status            string
	CreatedAt         sql.NullTime
	DeliveryAddress   string
	MenuItemID        int32
	Quanity           int32
	MenuItemName      string
	Price             float64
	RestaurantAddress sql.NullString
	RestaurantName    sql.NullString
	RestaurantPhone   string
	CostomerName      sql.NullString
	CustomerPhone     string
	CustomerID        int32
	CourierName       sql.NullString
}

func (q *Queries) GetFullOrderByID(ctx context.Context, id int32) ([]GetFullOrderByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFullOrderByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFullOrderByIDRow
	for rows.Next() {
		var i GetFullOrderByIDRow
		if err := rows.Scan(
			&i.OrderID,
			&i.Status,
			&i.CreatedAt,
			&i.DeliveryAddress,
			&i.MenuItemID,
			&i.Quanity,
			&i.MenuItemName,
			&i.Price,
			&i.RestaurantAddress,
			&i.RestaurantName,
			&i.RestaurantPhone,
			&i.CostomerName,
			&i.CustomerPhone,
			&i.CustomerID,
			&i.CourierName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFullOrdersByUserID = `-- name: GetFullOrdersByUserID :many
SELECT
    orders.id AS order_id,
    orders.status,
    orders.created_at,
    orders.address AS delivery_address,

    orderitem.menu_item_id,
    orderitem.quanity,

    menuitem.name AS menu_item_name,
    menuitem.price,

    restaurants.address AS restaurant_address,
    restaurants.user_name AS restaurant_name,
    restaurants.phone AS restaurant_phone,

    customer.user_name AS costomer_name,
    customer.phone AS customer_phone

FROM orders
         JOIN orderitem ON orders.id = orderitem.order_id
         JOIN menuitem ON orderitem.menu_item_id = menuitem.id
         JOIN users AS restaurants ON orders.restaurantid = restaurants.id
         JOIN users AS customer ON orders.customerid = customer.id
WHERE orders.customerid = $1
`

type GetFullOrdersByUserIDRow struct {
	OrderID           int32
	Status            string
	CreatedAt         sql.NullTime
	DeliveryAddress   string
	MenuItemID        int32
	Quanity           int32
	MenuItemName      string
	Price             float64
	RestaurantAddress sql.NullString
	RestaurantName    sql.NullString
	RestaurantPhone   string
	CostomerName      sql.NullString
	CustomerPhone     string
}

func (q *Queries) GetFullOrdersByUserID(ctx context.Context, customerid int32) ([]GetFullOrdersByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFullOrdersByUserID, customerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFullOrdersByUserIDRow
	for rows.Next() {
		var i GetFullOrdersByUserIDRow
		if err := rows.Scan(
			&i.OrderID,
			&i.Status,
			&i.CreatedAt,
			&i.DeliveryAddress,
			&i.MenuItemID,
			&i.Quanity,
			&i.MenuItemName,
			&i.Price,
			&i.RestaurantAddress,
			&i.RestaurantName,
			&i.RestaurantPhone,
			&i.CostomerName,
			&i.CustomerPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFullPendingOrders = `-- name: GetFullPendingOrders :many
SELECT
    orders.id AS order_id,
    orders.status,
    orders.created_at,
    orders.address AS delivery_address,

    orderitem.menu_item_id,
    orderitem.quanity,

    menuitem.name AS menu_item_name,
    menuitem.price,

    restaurants.address AS restaurant_address,
    restaurants.user_name AS restaurant_name,
    restaurants.phone AS restaurant_phone,

    customer.user_name AS costomer_name,
    customer.phone AS customer_phone

FROM orders
         JOIN orderitem ON orders.id = orderitem.order_id
         JOIN menuitem ON orderitem.menu_item_id = menuitem.id
         JOIN users AS restaurants ON orders.restaurantid = restaurants.id
        JOIN users AS customer ON orders.customerid = customer.id
WHERE orders.status = 'pending'
`

type GetFullPendingOrdersRow struct {
	OrderID           int32
	Status            string
	CreatedAt         sql.NullTime
	DeliveryAddress   string
	MenuItemID        int32
	Quanity           int32
	MenuItemName      string
	Price             float64
	RestaurantAddress sql.NullString
	RestaurantName    sql.NullString
	RestaurantPhone   string
	CostomerName      sql.NullString
	CustomerPhone     string
}

func (q *Queries) GetFullPendingOrders(ctx context.Context) ([]GetFullPendingOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getFullPendingOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFullPendingOrdersRow
	for rows.Next() {
		var i GetFullPendingOrdersRow
		if err := rows.Scan(
			&i.OrderID,
			&i.Status,
			&i.CreatedAt,
			&i.DeliveryAddress,
			&i.MenuItemID,
			&i.Quanity,
			&i.MenuItemName,
			&i.Price,
			&i.RestaurantAddress,
			&i.RestaurantName,
			&i.RestaurantPhone,
			&i.CostomerName,
			&i.CustomerPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderStatusByID = `-- name: GetOrderStatusByID :one
SELECT orders.status FROM orders
WHERE orders.id = $1
`

func (q *Queries) GetOrderStatusByID(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getOrderStatusByID, id)
	var status string
	err := row.Scan(&status)
	return status, err
}
