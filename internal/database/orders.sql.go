// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders(customerid, restaurantid, address, status, created_at)
VALUES (
        $1,
        $2,
        $3,
        'pending',
        NOW()
)
RETURNING id, customerid, restaurantid, courierid, status, created_at, address
`

type CreateOrderParams struct {
	Customerid   int32
	Restaurantid int32
	Address      string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.Customerid, arg.Restaurantid, arg.Address)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Customerid,
		&i.Restaurantid,
		&i.Courierid,
		&i.Status,
		&i.CreatedAt,
		&i.Address,
	)
	return i, err
}

const getFullOrderByID = `-- name: GetFullOrderByID :many
SELECT
    orders.id AS order_id,
    orders.customerid,
    orders.restaurantid AS order_restaurant_id,
    orders.courierid,
    orders.status,
    orders.created_at,
    orders.address,

    orderitem.menu_item_id,
    orderitem.quanity,

    menuitem.name AS menu_item_name,
    menuitem.price

FROM orders
         JOIN orderitem ON orders.id = orderitem.order_id
         JOIN menuitem ON orderitem.menu_item_id = menuitem.id
WHERE orders.id = $1
`

type GetFullOrderByIDRow struct {
	OrderID           int32
	Customerid        int32
	OrderRestaurantID int32
	Courierid         sql.NullInt32
	Status            string
	CreatedAt         sql.NullTime
	Address           string
	MenuItemID        int32
	Quanity           int32
	MenuItemName      string
	Price             float64
}

func (q *Queries) GetFullOrderByID(ctx context.Context, id int32) ([]GetFullOrderByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFullOrderByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFullOrderByIDRow
	for rows.Next() {
		var i GetFullOrderByIDRow
		if err := rows.Scan(
			&i.OrderID,
			&i.Customerid,
			&i.OrderRestaurantID,
			&i.Courierid,
			&i.Status,
			&i.CreatedAt,
			&i.Address,
			&i.MenuItemID,
			&i.Quanity,
			&i.MenuItemName,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFullOrdersByUserID = `-- name: GetFullOrdersByUserID :many
SELECT
    orders.id AS order_id,
    orders.customerid,
    orders.restaurantid AS order_restaurant_id,
    orders.courierid,
    orders.status,
    orders.created_at,
    orders.address,

    orderitem.menu_item_id,
    orderitem.quanity,

    menuitem.name AS menu_item_name,
    menuitem.price

FROM orders
         JOIN orderitem ON orders.id = orderitem.order_id
         JOIN menuitem ON orderitem.menu_item_id = menuitem.id
WHERE orders.customerid = $1
`

type GetFullOrdersByUserIDRow struct {
	OrderID           int32
	Customerid        int32
	OrderRestaurantID int32
	Courierid         sql.NullInt32
	Status            string
	CreatedAt         sql.NullTime
	Address           string
	MenuItemID        int32
	Quanity           int32
	MenuItemName      string
	Price             float64
}

func (q *Queries) GetFullOrdersByUserID(ctx context.Context, customerid int32) ([]GetFullOrdersByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFullOrdersByUserID, customerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFullOrdersByUserIDRow
	for rows.Next() {
		var i GetFullOrdersByUserIDRow
		if err := rows.Scan(
			&i.OrderID,
			&i.Customerid,
			&i.OrderRestaurantID,
			&i.Courierid,
			&i.Status,
			&i.CreatedAt,
			&i.Address,
			&i.MenuItemID,
			&i.Quanity,
			&i.MenuItemName,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
